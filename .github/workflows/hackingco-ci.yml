name: HackingCo CI/CD Pipeline

on:
  push:
    branches: [ main, develop, release/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1' # Weekly security scan

env:
  NODE_VERSION: '18.x'
  HACKINGCO_BRAND_PRIMARY: '#1E40AF'
  HACKINGCO_BRAND_SECONDARY: '#10B981'
  HACKINGCO_BRAND_ACCENT: '#F59E0B'

jobs:
  # Code Quality Checks
  quality-checks:
    name: Code Quality & Standards
    runs-on: ubuntu-latest
    steps:
      - name: 🎯 Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🎨 Check Code Formatting
        run: npm run format:check

      - name: 🔍 Lint Code
        run: npm run lint

      - name: 📊 Run SonarQube Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          if [ -n "$SONAR_TOKEN" ]; then
            npx sonarqube-scanner
          else
            echo "⚠️  SonarQube token not configured, skipping analysis"
          fi

  # Security Scanning
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: 🎯 Checkout Repository
        uses: actions/checkout@v3

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🛡️ Run npm audit
        run: npm audit --audit-level=moderate

      - name: 🔐 Run Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: 📋 OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'hackingco-flow-framework'
          path: '.'
          format: 'HTML'

  # Unit & Integration Tests
  test-suite:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    steps:
      - name: 🎯 Checkout Repository
        uses: actions/checkout@v3

      - name: 🔧 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🧪 Run Unit Tests
        run: npm run test:unit -- --coverage

      - name: 🔄 Run Integration Tests
        run: npm run test:integration

      - name: 📊 Upload Coverage Reports
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unittests
          name: hackingco-coverage

  # End-to-End Tests
  e2e-tests:
    name: E2E Testing
    runs-on: ubuntu-latest
    needs: [quality-checks, test-suite]
    steps:
      - name: 🎯 Checkout Repository
        uses: actions/checkout@v3

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🏗️ Build Application
        run: npm run build

      - name: 🌐 Run E2E Tests
        uses: cypress-io/github-action@v5
        with:
          start: npm run start:test
          wait-on: 'http://localhost:3000'
          config-file: cypress.config.js

      - name: 📸 Upload E2E Screenshots
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-screenshots
          path: cypress/screenshots

  # Build and Package
  build-package:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [quality-checks, security-scan, test-suite]
    steps:
      - name: 🎯 Checkout Repository
        uses: actions/checkout@v3

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🏗️ Build Production Bundle
        run: npm run build:prod
        env:
          NODE_ENV: production
          HACKINGCO_BUILD_ID: ${{ github.sha }}

      - name: 📊 Analyze Bundle Size
        run: npm run analyze:bundle

      - name: 📦 Create Deployment Package
        run: |
          mkdir -p hackingco-deploy
          cp -r dist/* hackingco-deploy/
          cp package*.json hackingco-deploy/
          tar -czf hackingco-flow-${{ github.sha }}.tar.gz hackingco-deploy/

      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: hackingco-build-${{ github.sha }}
          path: hackingco-flow-${{ github.sha }}.tar.gz

  # Documentation Generation
  generate-docs:
    name: Generate Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: 🎯 Checkout Repository
        uses: actions/checkout@v3

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 📚 Generate API Documentation
        run: npm run docs:generate

      - name: 🌐 Deploy Documentation
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [e2e-tests, build-package]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.hackingco.com
    steps:
      - name: 🎯 Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: hackingco-build-${{ github.sha }}

      - name: 🚀 Deploy to AWS Staging
        run: |
          echo "🔄 Deploying to HackingCo Staging Environment..."
          # AWS deployment commands here
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: 🧪 Run Smoke Tests
        run: |
          echo "🔍 Running post-deployment smoke tests..."
          # Smoke test commands here

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [e2e-tests, build-package]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://app.hackingco.com
    steps:
      - name: 🎯 Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: hackingco-build-${{ github.sha }}

      - name: 🚀 Deploy to AWS Production
        run: |
          echo "🔄 Deploying to HackingCo Production Environment..."
          # AWS deployment commands here
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_PROD_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_PROD_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: 🔔 Notify Deployment Success
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: '🎉 HackingCo Flow Framework deployed to production!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: success()

  # Performance Monitoring
  performance-check:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [build-package]
    steps:
      - name: 🎯 Checkout Repository
        uses: actions/checkout@v3

      - name: 🏃 Run Performance Tests
        run: |
          echo "📊 Running HackingCo performance benchmarks..."
          # Performance test commands here

      - name: 📈 Report Performance Metrics
        run: |
          echo "📊 Reporting to HackingCo metrics dashboard..."
          # Metrics reporting commands here

# Notification for failed builds
  notify-failure:
    name: Notify Build Failure
    runs-on: ubuntu-latest
    if: failure()
    needs: [quality-checks, security-scan, test-suite, e2e-tests, build-package]
    steps:
      - name: 🔔 Send Failure Notification
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '❌ HackingCo CI/CD Pipeline failed for ${{ github.ref }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}